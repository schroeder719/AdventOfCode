def prettyprint(code, p, n=10):
    if n is 0:
        start = 0
        end = len(code)
    else:
        start = max(p-n, 0)
        end = min(len(code), p+n)
    
    print("[",end="")
    for i in range (start,end):
        if i == p: print("({})".format(i), end="\t")
        else: print("{}".format(i), end="\t")
        
    print("]")
    print("[",end="")
    for i in range (start,end):
        print("{},".format(code[i]), end="\t")
    print("]")

def intcode(code, debug):
    code = code + 250 * [0,]
    relative_base = 0
    p = 0
    if debug: prettyprint(code,0,0)
    done = False
    while not done:
        if debug: print("p: {} RB:{}".format(p,relative_base))
        code_str = str(code[p]).zfill(5)
        if debug: print(code_str)
        op = int(code_str[3])*10 + int(code_str[4])
        m1 = int(code_str[2])
        m2 = int(code_str[1])
        m3 = int(code_str[0])

        if m1 == 0:   o1 = code[p+1]                    # Position Mode
        elif m1 == 2: o1 = relative_base + code[p+1]    # Relative Mode
        else:         o1 = p+1                          # Imediate Mode
            
        if m2 == 0:   o2 = code[p+2]
        elif m2 == 2: o2 = relative_base + code[p+2]
        else:         o2 = p+2

        if m3 == 0:   o3 = code[p+3]
        elif m3 == 2: o3 = relative_base + code[p+3]
        else:         o3 = p+3

        if debug: 
            print("Op: {} m1: {} m2: {} m3: {}".format(op,m1,m2,m3))
            prettyprint(code, p)
        for i in code:
            if type(i) != type(int(1)):
                print("Type error in intcode!!!")
        if op == 1: #add
            if debug: print("+++ Add +++")
            d = o3
            if debug: print("o1={} o2={} d={}  cod[d]={}".format(o1,o2,d,code[d]))
            code[d] = int(code[o1]) + int(code[o2])
            p+=4

        elif op == 2: #multiply
            if debug: print("+++  multiply  +++")
            d = o3
            if debug: print("o1={} o2={} d={}  cod[d]={}".format(o1,o2,d,code[d]))            
            code[d] = code[o1] * code[o2]
            p+=4

        elif op == 3: #input
            if debug: print("+++  Input  +++")
            val = input("$: ")
            d = o1
            if debug: print("o1={} code[o1]={} d={}  code[d]={}".format(o1,code[o1],d,code[d]))
            code[d] = int(val)
            p+=2
        elif op == 4: #output
            if debug: print("+++  Output  +++")
            print("output: {}".format(code[o1]))
            p+=2
        elif op == 5: #jump-if-true
            if debug: print("+++  jump-if-true  +++")
            if debug: print("{} {} {} {}".format(o1,o2,code[o1], code[o2]))              
            if code[o1] is not  0:
                p = code[o2]
            else:
                p+=3
        elif op == 6: #jump-if-false
            if debug: print("+++  jump-if-false  +++")
            if debug: print("{} {} {} {}".format(o1,o2,code[o1], code[o2]))    
            
            if code[o1] is 0:
                p = code[o2]
            else:
                p+=3
        elif op == 7: #less than
            if debug: print("+++  less than   +++")           
            d = o3
            if debug: print("o1={} o2={} d={}  cod[d]={}".format(o1,o2,d,code[d]))

            if code[o1] < code[o2]:
                code[d] = 1
            else:
                code[d] = 0
             
            p+=4
            
        elif op == 8: #equals
            if debug: print("+++  equals  +++")
            d = o3
            if debug: print("o1={} o2={} d={}  cod[d]={}".format(o1,o2,d,code[d]))
          
            if code[o1] == code[o2]:
                code[d] = 1
            else:
                code[d] = 0
            p+=4
        elif op == 9: #adjust relative base
            if debug: print("+++  adjust relative base  ++++")
            if debug: print("{} {}".format(o1,code[o1]))           
            relative_base+=  code[o1]
            if debug: print("rb: {}->{}".format(relative_base-code[o1],relative_base))
            p+=2
        elif code[p] == 99:
            done = True
        else:
            print("error")
            return -1
        if debug: print(" ")
    return code[0]
print("0. Toggle debug")
print("1. AOC 9a Test 1")
print("2. AOC 9a Test 2")
print("3. AOC 9a Test 3")
print("4. AOC 9a BOOST - Enter 1")
print("<0 Quit")

codebank = [
    [],
    [109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99],
    [1102,34915192,34915192,7,4,7,99,0],
    [104,1125899906842624,99],
    [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1102,3,1,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1102,1,0,1020,1101,0,23,1010,1102,1,31,1009,1101,34,0,1019,1102,38,1,1004,1101,29,0,1017,1102,1,25,1018,1102,20,1,1005,1102,1,24,1008,1101,897,0,1024,1101,0,28,1016,1101,1,0,1021,1101,0,879,1028,1102,1,35,1012,1101,0,36,1015,1101,311,0,1026,1102,1,37,1011,1101,26,0,1014,1101,21,0,1006,1102,1,32,1002,1102,1,33,1003,1102,27,1,1001,1102,1,667,1022,1101,0,892,1025,1101,664,0,1023,1101,30,0,1000,1101,304,0,1027,1101,22,0,1013,1102,1,874,1029,1102,1,39,1007,109,12,21108,40,41,1,1005,1013,201,1001,64,1,64,1106,0,203,4,187,1002,64,2,64,109,5,1205,4,221,4,209,1001,64,1,64,1106,0,221,1002,64,2,64,109,5,21108,41,41,-5,1005,1017,243,4,227,1001,64,1,64,1106,0,243,1002,64,2,64,109,-30,2101,0,8,63,1008,63,30,63,1005,63,269,4,249,1001,64,1,64,1105,1,269,1002,64,2,64,109,15,2101,0,-5,63,1008,63,35,63,1005,63,293,1001,64,1,64,1106,0,295,4,275,1002,64,2,64,109,28,2106,0,-8,1001,64,1,64,1105,1,313,4,301,1002,64,2,64,109,-22,1205,7,329,1001,64,1,64,1106,0,331,4,319,1002,64,2,64,109,-12,1208,6,37,63,1005,63,351,1001,64,1,64,1106,0,353,4,337,1002,64,2,64,109,-3,2108,21,8,63,1005,63,375,4,359,1001,64,1,64,1106,0,375,1002,64,2,64,109,14,1201,-5,0,63,1008,63,39,63,1005,63,401,4,381,1001,64,1,64,1105,1,401,1002,64,2,64,109,17,1206,-9,419,4,407,1001,64,1,64,1105,1,419,1002,64,2,64,109,-10,21101,42,0,-4,1008,1015,42,63,1005,63,445,4,425,1001,64,1,64,1105,1,445,1002,64,2,64,109,-5,1206,7,457,1105,1,463,4,451,1001,64,1,64,1002,64,2,64,109,-6,2107,34,-5,63,1005,63,479,1105,1,485,4,469,1001,64,1,64,1002,64,2,64,109,-8,2102,1,5,63,1008,63,23,63,1005,63,505,1106,0,511,4,491,1001,64,1,64,1002,64,2,64,109,5,2102,1,1,63,1008,63,21,63,1005,63,537,4,517,1001,64,1,64,1105,1,537,1002,64,2,64,109,15,21107,43,44,-6,1005,1014,555,4,543,1106,0,559,1001,64,1,64,1002,64,2,64,109,-6,1207,-7,38,63,1005,63,579,1001,64,1,64,1106,0,581,4,565,1002,64,2,64,109,-17,1201,4,0,63,1008,63,28,63,1005,63,601,1106,0,607,4,587,1001,64,1,64,1002,64,2,64,109,14,2107,31,-9,63,1005,63,625,4,613,1105,1,629,1001,64,1,64,1002,64,2,64,109,15,21102,44,1,-7,1008,1019,44,63,1005,63,651,4,635,1106,0,655,1001,64,1,64,1002,64,2,64,109,3,2105,1,-6,1106,0,673,4,661,1001,64,1,64,1002,64,2,64,109,-14,21101,45,0,2,1008,1017,42,63,1005,63,693,1105,1,699,4,679,1001,64,1,64,1002,64,2,64,109,5,21107,46,45,-8,1005,1012,719,1001,64,1,64,1105,1,721,4,705,1002,64,2,64,109,-19,2108,21,7,63,1005,63,737,1106,0,743,4,727,1001,64,1,64,1002,64,2,64,109,9,1207,-2,25,63,1005,63,761,4,749,1106,0,765,1001,64,1,64,1002,64,2,64,109,-10,1208,1,27,63,1005,63,783,4,771,1106,0,787,1001,64,1,64,1002,64,2,64,109,5,1202,4,1,63,1008,63,29,63,1005,63,807,1106,0,813,4,793,1001,64,1,64,1002,64,2,64,109,8,21102,47,1,0,1008,1013,50,63,1005,63,833,1106,0,839,4,819,1001,64,1,64,1002,64,2,64,109,-12,1202,8,1,63,1008,63,31,63,1005,63,865,4,845,1001,64,1,64,1105,1,865,1002,64,2,64,109,34,2106,0,-7,4,871,1105,1,883,1001,64,1,64,1002,64,2,64,109,-18,2105,1,7,4,889,1105,1,901,1001,64,1,64,4,64,99,21101,0,27,1,21101,915,0,0,1106,0,922,21201,1,13801,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21102,942,1,0,1106,0,922,21201,1,0,-1,21201,-2,-3,1,21102,957,1,0,1105,1,922,22201,1,-1,-2,1106,0,968,21202,-2,1,-2,109,-3,2106,0,0]
    ]
print(len(codebank[4]))    
running = True
debug = True
while running:
    val = int(input("$: "))
    if val in range(1,9):
        intcode(codebank[val], debug)
    elif val == 0:
        debug = not debug
        print("Debug: {}".format(debug))
    else:
        running = False
        
            